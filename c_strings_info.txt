-----------------
Strings
-----------------
Declaring a string:
char myString[20] = "This is a string.";	// Creates a character array (string) of size 20 called myString.

Scanning into a string:
fgets(str, num, stdin) - reads one line of characters from user input, ending with a newline, and writes those characters into the C string str
fgets() is in stdio.h

Eliminate newline character from 'Enter' in from fgets():
if (nameArr[strlen(nameArr) - 1] == '\n') {
      nameArr[strlen(nameArr)-1] = '\0';
   }

-----------------
String Functions
-----------------

strcpy(destStr, sourceStr) -- Copies sourceStr (up to and including null character) to destStr.
- strcpy(targetText, userText); // Copies "UNICEF" + null char 
                                // to targetText 
- strcpy(targetText, orgName);  // Error: "United Nations" 
                                // has > 10 chars
- targetText = orgName;         // Error: Strings can't be 
                                // copied this way

strncpy(destStr, sourceStr, numChars) -- Copies up to numChars characters.
- strncpy(orgName, userText, 6); // orgName is "UNICEF Nations"

strcat(destStr, sourceStr) -- Copies sourceStr (up to and including null character) to end of destStr (starting at destStr's null character).
-  strcat(orgName, userText); // orgName is "United NationsUNICEF"

strncat(destStr, sourceStr, numChars) --Copies up to numChars characters to destStr's end, then appends null character.
- strcpy(targetText, "abc");           // targetText is "abc"
- strncat(targetText, "123456789", 3); // targetText is "abc123"

strchr(sourceStr, searchChar) --Returns NULL if searchChar does not exist in sourceStr.
- if (strchr(orgName, 'U') != NULL) { // 'U' exists in orgName?
   ...  // 'U' exists in "United Nations", branch taken
}

size_t strlen(sourceStr) -- Returns number of characters in sourceStr up to, but not including, first null character. size_t is integer type.
- x = strlen(orgName);    // Assigns 14 to x 
- x = strlen(userText);   // Assigns 6 to x
- x = strlen(targetText); // Error: targetText may lack null char

int strcmp(str1, str2) -- Returns 0 if str1 and str2 are equal, non-zero if they differ.
- if (strcmp(orgName, "United Nations") == 0) {
   ... // Equal, branch taken
}



isalpha(c) -- Returns true if c is alphabetic: a-z or A-Z.
- isalpha('A');            // Returns true
- isalpha(myString[0]);    // Returns true because 'H' is alphabetic
- isalpha(myString[3]);    // Returns false because '9' is not alphabetic

isdigit(c) -- Returns true if c is a numeric digit: 0-9.
- isdigit(myString[3]);    // Returns true because '9' is numeric
- isdigit(myString[4]);    // Returns false because ! is not numeric

isalnum(c) -- Returns true if c is alphabetic or a numeric digit. Thus, returns true if either isalpha or isdigit would return true.
- isalnum('A');            // Returns true
- isalnum(myString[3]);    // Returns true because '9' is numeric

isspace(c) -- Returns true if character c is a whitespace.
- isspace(myString[5]);    // Returns true because that character is a space ' '.
- isspace(myString[0]);    // Returns false because 'H' is not whitespace.

islower(c) -- Returns true if character c is a lowercase letter a-z.
- islower(myString[0]);    // Returns false because 'H' is not lowercase. 
- islower(myString[1]);    // Returns true because 'e' is lowercase.
- islower(myString[3]);    // Returns false because '9' is not a lowercase letter.

isupper(c) -- Returns true if character c is an uppercase letter A-Z.
- isupper(myString[0]);    // Returns true because 'H' is uppercase. 
- isupper(myString[1]);    // Returns false because 'e' is not uppercase.
- isupper(myString[3]);    // Returns false because '9' is not an uppercase letter.

isblank(c) -- Returns true if character c is a blank character. Blank characters include spaces and tabs.
- isblank(myString[5]);    // Returns true because that character is a space ' '. 
- isblank(myString[0]);    // Returns false because 'H' is not blank.

isxdigit(c) -- Returns true if c is a hexadecimal digit: 0-9, a-f, A-F.
- isxdigit(myString[3]);  // Returns true because '9' is a hexadecimal digit.
- isxdigit(myString[1]);  // Returns true because 'e' is a hexadecimal digit.
- isxdigit(myString[6]);  // Returns false because 'G' is not a hexadecimal digit.

ispunct(c) -- Returns true if c is a punctuation character. Punctuation characters include: !"#$%&'()*+,-./:;<=>?@[\]^_`{|}~
- ispunct(myString[4]);  // Returns true because '!' is a punctuation character. 
- ispunct(myString[6]); // Returns false because 'G' is not a punctuation character.

isprint(c) -- Returns true if c is a printable character. Printable characters include alphanumeric, punctuation, and space characters.
- isprint(myString[0]);    // Returns true because 'H' is a alphabetic. 
- isprint(myString[4]);    // Returns true because '!' is punctuation.
- isprint(myString[5]);    // Returns true because that character is a space ' '.
- isprint('\0');           // Returns false because the null character is not printable

iscntrl(c) -- Returns true if c is a control character. Control characters are all characters that are not printable.
- iscntrl(myString[0]);    // Returns false because 'H' is a not a control character 
- iscntrl(myString[5]);    // Returns false because space is a not a control character
- iscntrl('\0');           // Returns true because the null character a control character